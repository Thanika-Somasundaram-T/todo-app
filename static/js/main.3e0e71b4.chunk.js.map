{"version":3,"sources":["reportWebVitals.js","core/config.js","services/todoManager.js","core/actions.js","core/seed.js","core/context.js","services/taskManager.js","components/todoPane/inputBox.js","components/todoPane/todo.js","components/todoPane/todoList.js","components/todoPane/toggleAllButton.js","components/todoPane/clearCompletedButton.js","components/todoPane/filterButtons.js","components/todoPane/filterBar.js","components/todoPane/editButton.js","components/todoPane/addButton.js","components/todoPane/actionButton.js","components/todoPane/index.js","components/taskPane/task.js","components/taskPane/taskList.js","components/taskPane/index.js","services/taskRetriever.js","services/ticker.js","components/themeSelector.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","config","idlength","input","refreshIdLength","tickerDelay","milliSeconds","maxTaskCount","themes","filters","all","active","todo","completed","TodoManager","addTodo","todos","text","concat","id","rndString","idLength","getTodo","clearCompleted","filter","toggleTodo","data","map","toggleTodos","isChecked","removeTodo","currentData","getActiveCount","length","getTodosCount","getCompletedCount","getFilteredTodos","editTodo","edit","actions","updateInput","dummy","state","seed","setFilter","filterName","editing","setEdit","setTask","tasks","removeTask","task","TaskManager","addTaskToTodo","addTask","taskName","updateTheme","theme","refreshID","context","getTaskId","init","Task","actionKeys","Enter","Escape","InputBox","value","onChange","evt","target","onKeyUp","code","Todo","className","type","checked","onClick","TodoList","filteredTodos","ToggleButton","ClearCompletedButton","FilterButtons","FilterBar","EditButton","disabled","AddButton","ActionButton","todoPane","peek","ToggleAllButton","RemoveButton","TaskList","TaskPane","getRndTask","faker","hacker","verb","noun","charAt","toUpperCase","substr","TaskRetriever","getTasks","getCount","rndBetween","i","push","Ticker","start","setInterval","ThemeSelector","name","App","useEffect","Box","display","height","flexDirection","overflow","width","TodoPane","Entry","useState","setState","updateContext","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e0e71b4.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n\tif(onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","const seconds = 60;\nconst milliSeconds = 1000;\nconst minutes = 0.5;\nconst themes = ['default', 'light', 'dark'];\n\nconst config = {\n\tidlength: 16,\n\tinput: '',\n\trefreshIdLength: 4,\n\ttickerDelay: milliSeconds * seconds * minutes,\n\tmaxTaskCount: 3,\n\tthemes: themes,\n};\n\nexport default config;\n","import { rndString } from '@laufire/utils/random';\nimport config from '../core/config';\n\nconst getTodo = (text) => ({\n\tid: rndString(config.idLength),\n\ttext: text,\n\tcompleted: false,\n});\n\nconst addTodo = (todos, text) =>\n\t(text === '' ? todos : todos.concat(getTodo(text)));\n\nconst toggleTodo = (todos, data) => todos.map((todo) => (todo.id !== data.id\n\t?\ttodo\n\t:\t{\n\t\t...todo,\n\t\tcompleted: !data.completed,\n\t}\n));\n\nconst removeTodo = (todos, data) =>\n\ttodos.filter((currentData) => currentData.id !== data.id);\n\nconst toggleTodos = (todos, isChecked) =>\n\ttodos.map((todo) => (\n\t\t{\n\t\t\t...todo,\n\t\t\tcompleted: isChecked,\n\t\t}\n\t));\n\nconst getActiveCount = ({ todos }) =>\n\ttodos.filter((todo) => !todo.completed).length;\n\nconst getTodosCount = ({ todos }) => todos.length;\n\nconst clearCompleted = (todos) =>\n\ttodos.filter((todo) => !todo.completed);\n\nconst getCompletedCount = ({ todos }) =>\n\ttodos.filter((todo) => todo.completed).length;\n\nconst filters = {\n\tall: () => true,\n\tactive: (todo) => !todo.completed,\n\tcompleted: (todo) => todo.completed,\n};\n\nconst getFilteredTodos = ({ todos, filter }) =>\n\ttodos.filter(filters[filter]);\n\nconst editTodo = (\n\ttodos, edit, text\n) => todos.map((todo) => (\n\ttodo.id !== edit?.id\n\t\t? todo\n\t\t: {\n\t\t\t...todo,\n\t\t\ttext,\n\t\t}));\n\nconst TodoManager = {\n\taddTodo,\n\tclearCompleted,\n\ttoggleTodo,\n\ttoggleTodos,\n\tremoveTodo,\n\tgetActiveCount,\n\tgetTodosCount,\n\tgetCompletedCount,\n\tgetFilteredTodos,\n\teditTodo,\n};\n\nexport default TodoManager;\n","import TaskManager from '../services/taskManager';\nimport TodoManager from '../services/todoManager';\n\nconst updateInput = (dummy, input) => ({\n\tinput,\n});\nconst addTodo = ({ state, seed }) => ({\n\tinput: seed.input,\n\ttodos: TodoManager.addTodo(state.todos, state.input),\n});\nconst toggleTodo = ({ state }, todo) => ({\n\ttodos: TodoManager.toggleTodo(state.todos, todo),\n});\n\nconst removeTodo = ({ state }, todo) => ({\n\ttodos: TodoManager.removeTodo(state.todos, todo),\n});\n\nconst toggleTodos = ({ state }, isChecked) => ({\n\ttodos: TodoManager.toggleTodos(state.todos, isChecked),\n});\n\nconst clearCompleted = ({ state }) => ({\n\ttodos: TodoManager.clearCompleted(state.todos),\n});\n\nconst setFilter = (dummy, filterName) => ({\n\tfilter: filterName,\n});\n\nconst setEdit = (dummy, todo) => ({\n\tediting: todo,\n\tinput: todo.text,\n});\n\nconst editTodo = ({ state }) => ({\n\tinput: '',\n\tediting: null,\n\ttodos: TodoManager.editTodo(\n\t\tstate.todos, state.editing, state.input\n\t),\n});\n\nconst setTask = (dummy, tasks) => ({\n\ttasks,\n});\n\nconst removeTask = ({ state }, task) => ({\n\ttasks: TaskManager.removeTask(state.tasks, task),\n});\n\nconst addTaskToTodo = ({ state }, task) => ({\n\ttodos: TodoManager.addTodo(state.todos, task.text),\n});\n\nconst addTask = ({ state }, taskName) => ({\n\ttasks: TaskManager.addTask(state.tasks, taskName),\n});\n\nconst updateTheme = (dummy, theme) => ({\n\ttheme,\n});\n\nconst actions = {\n\tupdateInput,\n\taddTodo,\n\tclearCompleted,\n\ttoggleTodo,\n\ttoggleTodos,\n\tremoveTodo,\n\tsetFilter,\n\teditTodo,\n\tsetEdit,\n\tsetTask,\n\tremoveTask,\n\taddTaskToTodo,\n\taddTask,\n\tupdateTheme,\n};\n\nexport default actions;\n","import config from './config';\nimport { rndString } from '@laufire/utils/random';\n\nconst refreshIDLength = 4;\n\nconst seed = {\n\tinput: config.input,\n\trefreshID: rndString(refreshIDLength),\n\ttodos: [],\n\tfilter: 'all',\n\tediting: null,\n\ttasks: [],\n\tthemes: config.themes,\n\ttheme: config.themes[0],\n};\n\nexport default seed;\n","import actions from './actions';\nimport config from './config';\nimport seed from './seed';\n\nconst context = {\n\tactions,\n\tconfig,\n\tseed,\n};\n\nexport default context;\n","import context from '../core/context';\nimport config from '../core/config';\nimport { rndString } from '@laufire/utils/random';\n\nconst { idlength } = config;\n\nconst getTaskId = (text) => ({\n\tid: rndString(idlength),\n\ttext: text,\n});\n\nconst init = () =>\n\tcontext.actions.setTask([\n\t\tgetTaskId('Task1'),\n\t\tgetTaskId('Task2'),\n\t\tgetTaskId('Task3'),\n\t]);\n\nconst removeTask = (tasks, task) =>\n\ttasks.filter((Task) => Task.id !== task.id);\n\nconst addTask = (tasks, task) => (\n\ttask === ''\n\t\t? tasks\n\t\t: tasks.concat(getTaskId(task))\n);\n\nconst TaskManager = {\n\tinit,\n\tremoveTask,\n\taddTask,\n};\n\nexport default TaskManager;\n","import { React } from 'react';\nimport context from '../../core/context';\n\nconst EditActionKey = () => (\n\tcontext.state.editing\n\t\t? 'editTodo'\n\t\t: 'addTodo'\n);\n\nconst actionKeys = {\n\tEnter: () => context.actions[EditActionKey()](),\n\tEscape: () => context.actions.updateInput(''),\n};\n\nconst InputBox = () =>\n\t<input\n\t\tvalue={ context.state.input }\n\t\tonChange={ (evt) => context.actions.updateInput(evt.target.value) }\n\t\tonKeyUp={ (evt) => actionKeys[evt.code] && actionKeys[evt.code]() }\n\t/>;\n\nexport default InputBox;\n","import { React } from 'react';\nimport context from '../../core/context';\n\n// eslint-disable-next-line react/prop-types\n// eslint-disable-next-line max-lines-per-function\nconst Todo = (todo) => {\n\tconst { text, id, completed } = todo;\n\tconst className = `todo ${ completed ? 'todo-completed' : 'todo-active' }` ;\n\n\treturn (\n\t\t<div key={ id } className={ className }>\n\t\t\t<span>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"checkBox\"\n\t\t\t\t\tchecked={ completed }\n\t\t\t\t\tonChange={ () => context.actions.toggleTodo(todo) }\n\t\t\t\t/>\n\t\t\t</span>\n\t\t\t<span\n\t\t\t\tonClick={ () => context.actions.setEdit(todo) }\n\t\t\t>\n\t\t\t\t{ text }\n\t\t\t</span>\n\t\t\t<span>\n\t\t\t\t<button\n\t\t\t\t\tclassName=\"button-x\"\n\t\t\t\t\tonClick={ () => context.actions.removeTodo(todo) }\n\t\t\t\t>x\n\t\t\t\t</button>\n\t\t\t</span>\n\t\t</div>\n\t);\n};\n\nexport default Todo;\n","import { React } from 'react';\nimport Todo from './todo';\nimport context from '../../core/context';\nimport TodoManager from '../../services/todoManager';\n\nconst TodoList = () => {\n\tconst filteredTodos = TodoManager.getFilteredTodos(context.state);\n\n\treturn <div>\n\t\t{ filteredTodos.map(Todo) }\n\t</div>;\n};\n\nexport default TodoList;\n","/* eslint-disable indent */\nimport { React } from 'react';\nimport context from '../../core/context';\nimport TodoManager from '../../services/todoManager';\n\nconst ToggleButton = () => {\n\tconst isChecked = TodoManager.getActiveCount(context.state) === 0;\n\tconst checkNoTodos = TodoManager.getTodosCount(context.state) === 0;\n\n\treturn checkNoTodos\n\t\t? null\n\t\t: <input\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tchecked={ isChecked }\n\t\t\t\tonChange={ () => context.actions.toggleTodos(!isChecked) }\n\t\t\t\t/>;\n};\n\nexport default ToggleButton;\n","/* eslint-disable indent */\nimport { React } from 'react';\nimport context from '../../core/context';\nimport TodoManager from '../../services/todoManager';\n\nconst ClearCompletedButton = () => {\n\tconst checkCompleted = TodoManager.getCompletedCount(context.state) === 0;\n\n\treturn checkCompleted\n\t\t? null\n\t\t: <button\n\t\t\t\tid=\"clr-btn\"\n\t\t\t\tonClick={ () => context.actions.clearCompleted() }\n\t\t\t\t>\n\t\t\tClear Completed\n\t\t</button>;\n};\n\nexport default ClearCompletedButton;\n","/* eslint-disable max-len */\nimport { React } from 'react';\nimport context from '../../core/context';\n\nconst FilterButtons = (filterName) => {\n\tconst className\n\t= `filter ${ context.state.filter === filterName ? 'filter-active' : 'filter-inactive' }`;\n\n\treturn <button key={ filterName } className={ className } onClick={ () => context.actions.setFilter(filterName) }>\n\t\t{ filterName }\n\t</button>;\n};\n\nexport default FilterButtons;\n","import { React } from 'react';\nimport FilterButtons from './filterButtons';\nimport context from '../../core/context';\nimport TodoManager from '../../services/todoManager';\n\nconst filters = ['all', 'active', 'completed'];\n\nconst FilterBar = () => {\n\tconst checkNoTodos = TodoManager.getTodosCount(context.state) === 0;\n\n\treturn checkNoTodos\n\t\t? null\n\t\t: <div>\n\t\t\t{ filters.map(FilterButtons) }\n\t\t</div>;\n};\n\nexport default FilterBar;\n","import { React } from 'react';\nimport context from '../../core/context';\n\nconst EditButton = () =>\n\t<button\n\t\tclassName=\"button-OK\"\n\t\tdisabled={ context.state.input === '' }\n\t\tonClick={ () => context.actions.editTodo() }\n\t>OK\n\t</button>;\n\nexport default EditButton;\n","import { React } from 'react';\nimport context from '../../core/context';\n\nconst AddButton = () =>\n\t<button\n\t\tclassName=\"button\"\n\t\tdisabled={ context.state.input === '' }\n\t\tonClick={ context.actions.addTodo }\n\t>+\n\t</button>;\n\nexport default AddButton;\n","import context from '../../core/context';\nimport EditButton from './editButton';\nimport AddButton from './addButton';\n\nconst ActionButton = () => (context.state.editing\n\t? EditButton()\n\t: AddButton()\n);\n\nexport default ActionButton;\n","import InputBox from './inputBox';\nimport context from '../../core/context';\nimport TodoList from './todoList';\nimport ToggleAllButton from './toggleAllButton';\nimport ClearCompletedButton from './clearCompletedButton';\nimport FilterBar from './filterBar';\nimport ActionButton from './actionButton';\nimport { peek } from '@laufire/utils/debug';\nimport './default.css';\nimport './light.css';\nimport './style.css';\nimport './dark.css';\n\nconst todoPane = () => {\n\tpeek(\"hi\");\n\treturn (\n\t\t<div>\n\t\t<div>\n\t\t\t<h3> TODO'S </h3>\n\t\t</div>\n\t\t<div>{ ToggleAllButton() }\n\t\t\t{ InputBox() }\n\t\t\t{ ActionButton() }</div>\n\t\t<div>{ TodoList() }</div>\n\t\t<div>{ ClearCompletedButton() }</div>\n\t\t<div>{ FilterBar() }</div>\n\t\t<div>Refresh ID: { context.state.refreshID }</div>\n\t</div>\n\t);\n};\n\nexport default todoPane;\n","import { React } from 'react';\nimport context from '../../core/context';\n\nconst RemoveButton = (task) =>\n\t<button\n\t\tclassName=\"x\"\n\t\tonClick={ () => context.actions.removeTask(task) }\n\t>\n\t\tx\n\t</button>;\n\nconst AddButton = (task) =>\n\t<button\n\t\tonClick={\n\t\t\t() => {\n\t\t\t\tcontext.actions.addTaskToTodo(task);\n\t\t\t\tcontext.actions.removeTask(task);\n\t\t\t}\n\t\t}\n\t>\n\t\t+\n\t</button>;\n\nconst Task = (task) => {\n\tconst { id, text } = task;\n\n\treturn (\n\t\t<div key={ id } className=\"task\">\n\t\t\t<span>\n\t\t\t\t{ AddButton(task) }\n\t\t\t</span>\n\t\t\t<span>\n\t\t\t\t{text}\n\t\t\t</span>\n\t\t\t<span>\n\t\t\t\t{ RemoveButton(task) }\n\t\t\t</span>\n\t\t</div>\n\t);\n};\n\nexport default Task;\n","import { React } from 'react';\nimport context from '../../core/context';\nimport Task from './task';\n\nconst TaskList = () => {\n\tconst { tasks } = context.state;\n\n\treturn (\n\t\t<div>\n\t\t\t{tasks.map(Task)}\n\t\t</div>\n\t);\n};\n\nexport default TaskList;\n","import TaskList from './taskList';\nimport './default.css';\nimport './style.css';\nimport './light.css';\nimport './dark.css';\n\nconst TaskPane = () =>\n\t<div className=\"pane task-pane\">\n\t\t<h3>TASKS</h3>\n\t\t<div>{ TaskList() }</div>\n\t</div>\n\nexport default TaskPane;\n","import { rndBetween } from '@laufire/utils/random';\nimport faker from 'faker';\nimport config from '../core/config';\n\nconst toProperCase = (text) =>\n\ttext.charAt(0).toUpperCase() + text.substr(1);\n\nconst getRndTask = () =>\n\ttoProperCase(`${ faker.hacker.verb() } ${ faker.hacker.noun() }.`);\n\nconst getTasks = () => {\n\tconst getCount = rndBetween(0, config.maxTaskCount);\n\tconst tasks = [];\n\n\tfor(let i = 0; i < getCount;i++)\n\t\ttasks.push(getRndTask());\n\n\treturn tasks;\n};\n\nconst TaskRetriever = {\n\tgetTasks,\n};\n\nexport default TaskRetriever;\n","import context from '../core/context';\nimport config from '../core/config';\nimport TaskRetriever from './taskRetriever';\n\nconst start = () => {\n\tconst { addTask } = context.actions;\n\n\tsetInterval(() => {\n\t\tTaskRetriever.getTasks().map(addTask);\n\t}, config.tickerDelay);\n};\n\nconst Ticker = {\n\tstart,\n};\n\nexport default Ticker;\n","import { React } from 'react';\nimport context from '../core/context';\nimport config from '../core/config';\n\nconst ThemeSelector = () =>\n\t<select\n\t\tname=\"ThemeSelector\"\n\t\tvalue={ context.state.theme }\n\t\tonChange={ (evt) => context.actions.updateTheme(evt.target.value) }\n\t>\n\t\t{ config.themes.map((theme) =>\n\t\t\t<option\n\t\t\t\tkey={ theme }\n\t\t\t\tvalue={ theme }\n\t\t\t>\n\t\t\t\t{ theme }\n\t\t\t</option>)}\n\t</select>;\n\nexport default ThemeSelector;\n","/* eslint-disable max-len */\n/* eslint-disable max-lines-per-function */\nimport { React, useEffect } from 'react';\nimport './App.css';\nimport TaskManager from './services/taskManager';\nimport TodoPane from './components/todoPane';\nimport TaskPane from './components/taskPane';\nimport Ticker from './services/ticker';\nimport context from './core/context';\nimport ThemeSelector from './components/themeSelector';\nimport { Box } from '@material-ui/core';\n\nconst App = () => {\n\tuseEffect(TaskManager.init, []);\n\tuseEffect(Ticker.start, []);\n\n\treturn (\n\t\t<Box display=\"flex\" height=\"100vh\" flexDirection=\"row\" overflow=\"auto\" className=\"App\">\n\t\t\t<Box width=\"50%\" className={ `${ context.state.theme }-todo-pane` }>\n\t\t\t\t{ TodoPane() }\n\t\t\t</Box>\n\t\t\t<Box width=\"50%\" className={ `${ context.state.theme }-task-pane` }>\n\t\t\t\t{ TaskPane() }\n\t\t\t</Box>\n\t\t\t<Box>\n\t\t\t\t{ ThemeSelector() }\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n\nexport default App;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport updateContext from '@laufire/resist';\nimport './index.css';\nimport App from './App';\nimport context from './core/context';\n\nconst Entry = () => {\n\tconst [state, setState] = useState(context.seed);\n\n\tupdateContext(context, { state, setState });\n\n\treturn App(context);\n};\n\nReactDOM.render(<React.StrictMode>\n\t<Entry/>\n</React.StrictMode>,\ndocument.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}